(page "index.html"
      (:require [reveal.elements :refer [slideshow intro bullet slide highlight two-column-table chapter]]
                [tailrecursion.hoplon.svg :as svg])
      (:require-macros [reveal.macros :refer [with-counter]]))

(defc remaining-time (* 60 40))

(defc= mins (int (/ remaining-time 60)))

(defc= seconds (int (- remaining-time (* mins 60))))

(defc= show-bruce (and (#{30 20 15 10 5 4 3 2 1} mins)
                       (< seconds 15)))

(js/setInterval #(swap! remaining-time dec) 10)

(defmethod do! :animate
  [elem _ v]
  (if v
    (.animate (.show (js/jQuery elem)) (clj->js {:bottom "3rem" :opacity 1}) 600)
    (.animate (js/jQuery elem) (clj->js {:bottom "2rem" :opacity 0}) 600)))

(html
 (head
  (link :rel "stylesheet" :href "css/main.css"))
 (body
  (div :class "bruce" :animate (cell= show-bruce)
       (img :src "img/bruce.png")
       (div (p :class "title" "Bruce says:")
            (p (text "~{mins} minutes left"))))
  (slideshow :theme "moon"
             (intro :title "Reactive Web Applications"
                    (h3 "with Hoplon (and Datascript)")
                    (bullet "Daniel Neal, EvoEnergy")
                    (bullet "July 1st 2014"))

             (chapter
              (slide (div :class "verse"
                          (p "You can use Om, Tom")
                          (p "There's always Enlive, Clive")
                          (p "No need for PHP, Lee")
                          (p "To serve HTML 5"))

                     (div :class "verse"
                          (p "You can try Quiescent, Brent")
                          (p "Just install Caribou, Lou")
                          (p "There must be"))
                     (p :class "strong" "50 ways to write a web app in Clojure")
                     (p :class "small" "-- (with apologies to) Paul Simon"))

              (slide (img :src "img/framework.jpg"))

              (slide :title
                     (img :src "img/leiningen.jpeg")
                     (bullet "Wat, no Leiningen?"))

              (slide :title
                     (img :class "fullscreen" :src "img/shiny.jpg")))

             (chapter
              (slide :title "Add two numbers"
                     (let [a (cell nil)
                           b (cell nil)
                           c (cell= (+ a b))]
                       (div :class "add-two-numbers demo"
                            (input :id "a" :on-input #(reset! a (int (val-id "a"))))
                            (label "+")
                            (input :id "b" :on-input #(reset! b (int (val-id "b"))))
                            (label :class "answer" (text "~{c}")))))

              (slide :title "Add two numbers"
                     (highlight
                      ;;{{
                      (let [a (cell nil)
                            b (cell nil)
                            c (cell= (+ a b))]
                        (div (input :id "a" :on-input #(reset! a (int (val-id "a"))))
                             (label "+")
                             (input :id "b" :on-input #(reset! b (int (val-id "b"))))
                             (label (text "~{c}"))))
                      ;;}}
                      )))

             (chapter
              (slide :title "Solutions to building web applications"
                     (h4 "1. Static Templates")
                     (img {:src "img/templating.png"}))

              (slide :title "Solutions to building web applications"
                     (h4 "2. Virtual DOM + diff (React)")
                     (img {:src "img/templating-om.png"}))

              (slide :title "Solutions to building web applications"
                     (h4 "3. Lift HTML to JS environment (Hoplon, DOMO)")
                     (img {:src "img/templating-hoplon.png"})))

             (chapter
              (slide :title "Throw a ball"
                     (let [h 300
                           w 300
                           d 20
                           g 9.8
                           u 60
                           v 20
                           t (cell 0)
                           y (cell= (min h (- h (- (* u t) (* .5 g (* t t))))))
                           x (cell= (* v t))]
                       (div :class "ball demo"
                            (svg/svg :width w
                                     :height h
                                     (svg/circle :r (cell= (/ d 2))
                                                 :cx (cell= (+ x d))
                                                 :cy (cell= (- y d)))
                                     (svg/text :x x :y (cell= (- y (* 2 d))) (text "(~(.toFixed x 1),~(.toFixed y 1))")))
                            (input :type "range" :min 0 :max 15 :step 0.01 :id "time" :value t :on-input #(reset! t (val-id "time")))
                            (label (text "~{t}")))))

              (slide :title "Throw a ball"
                     (highlight
                      ;;{{
                      (let [v 20
                            u 60
                            g 9.8
                            t (cell 0)
                            y (cell= (- (* u t) (* .5 g (* t t))))
                            x (cell= (* v t))]
                        (div
                         (svg/svg
                          (svg/circle :r 10 :cx x :cy y)
                          (svg/text :x x :y y (text "(~{x},~{y})")))
                         (input :type "range" :min 0 :max 15 :step 0.01 :id "t" :value 0
                                :on-input #(reset! t (val-id "t")))
                         (label (text "~{t}"))))
                      ;;}}
                      )))

             (chapter
              (slide :title "Hue Saturation Lightness"
                     (img :src "img/hsl.png"))

              (slide :title "Hue Saturation Lightness"
                     (let [h (cell 180)
                           s (cell 0.5)
                           l (cell 0.5)
                           c (cell= (* s (- 1 (Math/abs (- (* 2 l) 1)))))
                           h* (cell= (/ h 60))
                           x (cell= (* c (- 1 (Math/abs (- (mod h* 2) 1)))))
                           rgb* (cell= (cond
                                        (<= 5 h* 6) [c 0 x]
                                        (<= 4 h* 5) [x 0 c]
                                        (<= 3 h* 4) [0 x c]
                                        (<= 2 h* 3) [0 c x]
                                        (<= 1 h* 2) [x c 0]
                                        (<= 0 h* 1) [c x 0]
                                        :else [0 0 0]))
                           m (cell= (- l (/ c 2)))
                           rgb (cell= [(+ m (rgb* 0)) (+ m (rgb* 1)) (+ m (rgb* 2))])
                           hex (cell= (apply str (map #(.slice (+ "0" (.toString (int (* 255 %)) 16)) -2) rgb)))]
                       (div :class "hsl demo"
                            (input :type "range" :min 0 :max 360 :step 1 :id "h" :value @h
                                   :on-input #(reset! h (val-id "h")))
                            (input :type "range" :min 0 :max 1 :step 0.01 :id "s" :value @s
                                   :on-input #(reset! s (val-id "s")))
                            (input :type "range" :min 0 :max 1 :step 0.01 :id "l" :value @l
                                   :on-input #(reset! l (val-id "l")))
                            (h2 :style (cell= (str "color:#" hex ";")) (text "#~{hex}")))))

              (slide :title "Hue Saturation Lightness"
                     (highlight
                      ;;{{
                      (let [h (cell 180)
                            s (cell 0.5)
                            l (cell 0.5)
                            c (cell= (* s (- 1 (Math/abs (- (* 2 l) 1)))))
                            h* (cell= (/ h 60))
                            x (cell= (* c (- 1 (Math/abs (- (mod h* 2) 1)))))
                            rgb* (cell= (cond (<= 5 h* 6) [c 0 x]
                                              (<= 4 h* 5) [x 0 c]
                                              (<= 3 h* 4) [0 x c]
                                              (<= 2 h* 3) [0 c x]
                                              (<= 1 h* 2) [x c 0]
                                              (<= 0 h* 1) [c x 0]
                                              :else [0 0 0]))
                            m (cell= (- l (/ c 2)))
                            rgb (cell= [(+ m (rgb* 0)) (+ m (rgb* 1)) (+ m (rgb* 2))])
                            hex (cell= (apply str (map #(.slice (+ "0" (.toString (int (* 255 %)) 16)) -2) rgb)))]
                        (div
                         (input :type "range" :min 0 :max 360 :step 1 :id "h" :value @h
                                :on-input #(reset! h (val-id "h")))
                         (input :type "range" :min 0 :max 1 :step 0.01 :id "s" :value @s
                                :on-input #(reset! s (val-id "s")))
                         (input :type "range" :min 0 :max 1 :step 0.01 :id "l" :value @l
                                :on-input #(reset! l (val-id "l")))
                         (h2 :style (cell= (str "color:#" hex ";")) (text "#~{hex}"))))
                      ;;}}
                      )))
             (chapter
              (slide :title "Filter a list"
                     (let [x (cell ["Pinkie Pie" "Rainbow Dash" "Twilight Sparkle" "Fluttershy" "Applejack" "Rarity"])
                           i (cell "")
                           filtered (cell= (filter #(re-find (js/RegExp. i "i") %) x))]
                       (div :class "filter demo"
                            (input :type "text" :id "i" :on-input #(reset! i (val-id "i")))
                            (loop-tpl :bindings [item filtered]
                                      (p :class "item" (text "~{item}"))))))
              (slide
               (highlight
                ;;{{
                (let [x (cell ["Pinkie Pie" ... "Rarity"])
                      i (cell "")
                      filtered (cell= (filter #(re-find (js/RegExp. i "i") %) x))]
                  (div
                   (input :type "text" :id "i" :on-input #(reset! i (val-id "i")))
                   (loop-tpl :bindings [item filtered]
                             (p (text "~{item}")))))
                ;;}}
                )))

             (chapter
              (slide (h1 "Let's make something")
                     (p "\"When all the questions of space, time, matter")
                     (p "and the nature of being have been resolved,")
                     (p "the question remains:")
                     (p :class "strong" "where shall we have dinner?\"")
                     (p  "-- Douglas Adams")))


              (chapter
               (slide :title "First, some prerequisites"
                      (h1 (text "~{slide-number} ~{total-slides}")))
               (slide :title "Install build tools"
                      (ol
                       (li "Java")
                       (li "Leiningen")
                       (li "Boot (http://www.github.com/tailrecursion/boot)"))
                      (p :class "strong" "and make a new project")
                      (bullet
                       (highlight
                        ;;{{
                        lein new hoplon-castra <name-of-project>
                        ;;}}
                        )))

               (slide :title "Add some dependencies"
                      (highlight
                       ;;{{
                       [com.datomic/datomic-free "0.9.4766"]
                       [datascript "0.1.5"]
                       [org.clojure/algo.generic "0.1.0"]
                       [org.clojure/tools.nrepl "0.2.3"]
                       ;;}}
                       ))

               (slide :title "Add Semantic UI"
                      (bullet "...because why not?")
                      (highlight
                       ;;{{
                       * Download Semantic UI from http://www.semantic-ui.com
                       * Copy the contents of the "packaged" folder to the assets directory
                       * Copy semantic.min.css to hl/semantic/semantic.min.inc.css
                       * Copy semantic.min.js to hl/semantic/semantic.min.inc.js
                       (This renaming instructs the Hoplon compiler to include the files)
                       ;;}}
                       ))

               (slide :title "Add a REPL and start up the auto compilation"
                      (highlight
                       ;;{{
                       (deftask repl-light
                         "Launch nrepl in the project."
                         []
                        (let [nrepl-server (atom nil)]
                          (fn [continue]
                            (fn [event]
                              (swap! nrepl-server
                                     #(or % (nrepl/start-server
                                             :port 0
                                             :handler (nrepl/default-handler #'light/lighttable-ops))))
                              (println "nrepl running on " (:port @nrepl-server))
                              (continue event)
                              @(promise)))))

                      ; add (repl-light) to development task to enable LightTable REPL
                      ;;}}
                      )
                     (highlight
                      ;;{{
                      cd <name-of-project>
                      boot development
                      open localhost:8000/index.html
                      ;;}}
                      )
                      (p :class "strong" "Does it work yet?")))
              (chapter
               (slide :title "Data and architecture")
               (slide :title "Server \u21C6 Client relationship"
                      (img :src "img/architecture.png"))

               (slide :title "Data model"
                      (img :src "img/datamodel.png"))

               (slide :title "... as a datomic schema"
                      (highlight
                       ;;{{
                       (ns cast.api
                         (:require [tailrecursion.castra :refer [defrpc]]
                                   [datomic.api :as d]
                                   [clojure.algo.generic.functor :refer [fmap]]))

                       (def schema
                         [{:db/id (d/tempid :db.part/db)
                           :db/ident :option/title
                           :db/valueType :db.type/string
                           :db/cardinality :db.cardinality/one
                           :db/unique :db.unique/identity
                           :db/doc "The title of an option"
                           :db.install/_attribute :db.part/db}

                          {:db/id (d/tempid :db.part/db)
                           :db/ident :option/description
                           :db/valueType :db.type/string
                           :db/cardinality :db.cardinality/one
                           :db/doc "The description of an option"
                           :db.install/_attribute :db.part/db}

                          {:db/id (d/tempid :db.part/db)
                           :db/ident :user/name
                           :db/unique :db.unique/identity
                           :db/doc "The name of the user"
                           :db/valueType :db.type/string
                           :db/cardinality :db.cardinality/one
                           :db.install/_attribute :db.part/db}

                          {:db/id (d/tempid :db.part/db)
                           :db/ident :user/max-votes
                           :db/doc "The maximum number of votes this user can have"
                           :db/valueType :db.type/long
                           :db/cardinality :db.cardinality/one
                           :db.install/_attribute :db.part/db}

                          {:db/id (d/tempid :db.part/db)
                           :db/ident :vote/user
                           :db/valueType :db.type/ref
                           :db/cardinality :db.cardinality/one
                           :db/doc "The user casting the vote"
                           :db.install/_attribute :db.part/db}

                          {:db/id (d/tempid :db.part/db)
                           :db/ident :vote/option
                           :db/valueType :db.type/ref
                           :db/cardinality :db.cardinality/one
                           :db/doc "The option being voted for"
                           :db.install/_attribute :db.part/db}])
                       ;;}}
                       ))

               (slide :title "Some seed data"
                      (highlight
                       ;;{{
                       (def seed-data
                         [{:db/id (d/tempid :db.part/user -1)
                           :option/title "The Fat Duck"
                           :option/description "Heston Blumenthal's flagship. Might involve eating table service."}
                          {:db/id (d/tempid :db.part/user -2)
                           :option/title "Dans le Noir"
                           :option/description "Dine in the complete darkness. Be accompanied to your seat by blind waiters."}
                          {:db/id (d/tempid :db.part/user -3)
                           :option/title "42 degree raw"
                           :option/description "Featuring food not heated above 42 degrees"}
                          {:db/id (d/tempid :db.part/user -4)
                           :option/title "The restaurant at the end of the universe"
                           :option/description "Meet and dine with a fascinating cross-section of the entire population of space and time."}
                          {:db/id (d/tempid :db.part/user -5)
                           :user/name "Arthur Dent"
                           :user/max-votes 5}
                          {:db/id (d/tempid :db.part/user -6)
                           :user/name "Ford Prefect"
                           :user/max-votes 5}
                          {:db/id (d/tempid :db.part/user -7)
                           :user/name "Zaphod Beeblebrox"
                           :user/max-votes 5}
                          {:db/id (d/tempid :db.part/user -8)
                           :user/name "Marvin the Robot"
                           :user/max-votes 0} ; What would be the point in voting anyway, here I am brain the size of a planet ...
                          ])
                       ;;}}
                       ))

               (slide :title "Drop and create a (test) database"
                      (highlight
                       ;;{{
                       (let [uri "datomic:mem://cast"]
                         (d/delete-database uri)
                         (d/create-database uri)
                         (def conn (d/connect uri))
                         (d/transact conn schema)
                         (d/transact conn seed-data))
                       ;;}}
                       ))

               (slide :title "What entities do we want a user to see?"
                      (highlight
                       ;;{{
                       (defn visible-entities
                         "Return all the entities in the database that are relevant to this application"
                         [db]
                         (d/q '[:find ?e
                                :in $ %
                                :where (visible ?e)]
                              db
                              '[[(visible ?u)
                                 [?u :user/name _]]
                                [(visible ?v)
                                 (?v :vote/option)]
                                [(visible ?o)
                                 (?o :option/title)]]))
                       ;;}}
                       ))

               (slide :title "Loading the entities ready for serialization"
                      (highlight
                       ;;{{
                       (defn load-entity
                         "Loads an entity and its attributes. Keep in the db/id
                         and replace references with ids (for use by DataScript)"
                         [db entity]
                         (as->
                          (d/entity db entity) e
                          (d/touch e)
                          (into {:db/id (:db/id e)} e) ; needs to be a hash-map, not an entity map
                          (fmap (fn [v]
                                  (cond (set? v) (mapv #(if (instance? datomic.query.EntityMap %) (:db/id %) %) v)
                                        (instance? datomic.query.EntityMap v) (:db/id v)
                                        :else v)) e)))
                       ;;}}
                       )))
               (chapter
                (slide :title "Meanwhile, on the client")
                (slide :title "Lay down the style (in advance)"
                      (highlight
;;{{
body {
  font-family: "Open Sans", "Helvetica Neue", "Helvetica", "Arial", sans-serif;
  margin: 0px;
  padding: 0px;
  color: #555555;
  min-width: 320px;
}

h1,h2,h3,h4,h5,p,div {
  font-family: "Source Sans Pro", "Helvetica Neue", "Helvetica", "Arial", sans-serif;
}

.container {
  position:relative;
  top:4rem;
  margin-left:5%;
  margin-right:5%;
}

.login.form.ui.segment {
  margin:auto;
  max-width:30rem;
}

.ui.mini.buttons .button {
  width:3rem;
}

.ui.mini.buttons span {
  margin-left:0.2rem;
}

.candidate .votes {
  width:6rem;
  min-width:6rem;
  display:inline-block;
  float:left;
}

.candidate .votes span {
  display:block;
  font-size:3em;
  font-weight:bold;
  text-align:center;
}

.candidate .details {
  overflow:hidden;
  padding-left:2rem;
}
;;}}
                       ))
               (slide :title "The page outline (and menu)"
                      (highlight
                       ;;{{
                       (page "index.html"
                             (:require [datascript :as d]
                                       [cast.rpc :as rpc]))

                       (html
                        (head
                         (link :rel "stylesheet" :type "text/css" :href "css/main.css"))
                        (body
                         (div :class "ui inverted fixed black main menu"
                              (div :class "ui item" "CAST")
                              (div :class "right menu"
                                   (div :class "item"
                                        (text "10 votes left"))
                                   (div :class "ui simple dropdown item"
                                        (text "Arthur Dent")
                                        (i :class "icon dropdown")
                                        (div :class "menu"
                                             (div :class "item" "Zaphod Beeblebrox")
                                             (div :class "item" "Marvin")))))
                         (div :class "container"
                              "Body goes here")))
                       ;;}}
                       ))

               (slide :title "UI components #1"
                      (h4 "A count button")
                      (highlight
                       ;;{{
                       (defelem count-button
                         "A small icon button with a count and a click action"
                         [{:keys [colour icon on-click count-cell] :as attrs} children]
                         (div :class (str "ui icon button " colour)
                              :on-click on-click
                              (i :class (str "icon " icon))
                              (span :do-toggle (cell= (> count-cell 0))
                                    (text "~{count-cell}"))))

                       ; --------------------------------

                       (let [count-cell (cell 0)]
                         (count-button :colour "red" :icon "plus" :count-cell count-cell
                                       :on-click #(swap! count-cell inc) ))
                       ;;}}
                       ))

               (slide :title "UI components #2"
                      (h4 "A candidate")
                      (highlight
                       ;;{{
                       (defelem candidate
                         "A UI element representing a candidate, with votes and buttons"
                         [{:keys [title description votes up-button down-button] :as attrs} children]
                         (div :class "candidate ui inverted black segment"
                              (div :class "votes ui raised teal segment"
                                   (span (text "~{votes}")))
                              (div :class "details"
                                   (div :class "ui bottom right attached black inverted label"
                                        (div :class "ui mini buttons"
                                             (count-button up-button)
                                             (count-button down-button)
                                   (div :class "ui header" (text "~{title}"))
                                   (div :class "ui clearing divider")
                                   (p (text "~{description}")))))))

                       ; --------------------------------

                       (let [c1 (cell 0)
                             c2 (cell 0)]
                         (candidate :title "A title"
                                    :description "A wonderful description"
                                    :votes 4
                                    :up-button {:colour "green"
                                                :icon "minus"
                                                :count-cell c1
                                                :on-click #(swap! c1 inc)}
                                    :down-button {:colour "red"
                                                  :icon "minus"
                                                  :count-cell c2
                                                  :on-click #(swap! c2 inc)}))
                       ;;}}
                       )))
             (chapter
              (slide :title "Bring on the data"
                      (highlight
                       ;;{{
                       ;; RPC endpoint - on the server
                       (defrpc get-state
                         "End point to supply visible entities to client"
                         []
                         (let [db (d/db conn system)]
                           {:entities (map (comp (partial load-entity db) first) (visible-entities db))}))
                       ;;}}
                       )
                      (p :class "strong" "\u21C5")
                      (highlight
                       ;;{{
                       ;; RPC endpoint - on the client
                       (defc state nil)
                       (defc error nil)
                       (defc loading [])

                       (def get-state (mkremote 'cast.api/get-state state error loading))
                       ;;}}
                       ))

               (slide :title "A DataScript database"
                      (highlight
                       ;;{{
                       (let [schema {:vote/user {:db/valueType :db.type/ref}
                                     :vote/option {:db/valueType :db.type/ref}}
                             entities (cell= (:entities rpc/state))]
                         (def db (cell= (d/with (d/empty-db schema) (:db rpc/entities)))))
                       ;;}}
                       ))

              (slide :title "The users dropdown menu"
                     (highlight
                      ;;{{
                      (defc selected-user nil)

                      (defc= users
                        (map (comp (partial d/entity db) first)
                             (d/q '[:find ?u
                                    :in $
                                    :where [?u :user/name _]] db)))

                      (defc= default-user (first users))

                      (defc= user (cell= (or selected-user default-user)))

                      ; Let's Update the View!

                      ;;}}
                      ))
              (slide :title "Displaying the options"
                     (highlight
                      ;;{{
                      (defc= options
                        (d/q '[:find ?e ?t ?d
                               :in $ ?p
                               :where
                               [?e :option/title ?t]
                               [?e :option/description ?d]] db))
                      ;;}}
                      ))

               (slide :title "And their counts"
                      (highlight
                       ;;{{
                       (let [count-all (fn [db option]
                                         (ffirst (d/q '[:find (count ?v)
                                                        :in $ ?o
                                                        :where
                                                        [?v :vote/option ?o]] db option)))

                             count-user (fn [db option user]
                                          (ffirst (d/q '[:find (count ?v)
                                                         :in $ ?o ?u
                                                         :where
                                                         [?v :vote/option ?o]
                                                         [?v :vote/user ?u]] db option user)))]
                         (defc= options-with-votes
                           (for [[id title description] options]
                             [id title description (or (count-all db id) 0) (or (count-user db id (:db/id user)) 0)])))

                       ; Let's Update the View!
                       ;;}}
                       ))

              (slide :title "Actions - voting"
                     (highlight
                      ;;{{
                      (defrpc up-vote!
                        "Up vote an option"
                        [option user]
                        (d/transact conn [{:db/id (d/tempid :db.part/user) :vote/option option :vote/user user}])
                        (get-state))

                      (defrpc down-vote!
                        "Down vote an option"
                        [option user]
                        (let [db (d/db conn)
                              v (ffirst (d/q '[:find ?v
                                               :in $ ?o ?u
                                               :where
                                               [?v :vote/user ?u]
                                               [?v :vote/option ?o]] db option user))]
                          (when v (d/transact conn [[:db.fn/retractEntity v]]))
                          (get-state)))
                      ;;}}
                      )

                     (p :class "strong" "\u21C5")
                     (highlight
                      ;;{{
                      (def up-vote! (mkremote 'cast.api/up-vote! state error loading))
                      (def down-vote! (mkremote 'cast.api/down-vote! state error loading))
                      ;;}}
                      ))

              (slide :title "Actions - voting"
                     (highlight
                      ;;{{
                      :up-button {:count user-votes :on-click #(up-vote! @id (:db/id @user))}
                      :down-button {:count nil :on-click #(down-vote! @id (:db/id @user))}
                      ;;}}
                      ))

              (slide :title "Remaining vote count and switch user"
                     (highlight
                      ;;{{
                      (defc= votes (ffirst (d/q '[:find (count ?v)
                                                  :in $ ?u
                                                  :where [?v :vote/user ?u]])
                                           db (:db/id user)))

                      (defc= remaining-votes (- (:user/max-votes user) votes))

                      ; Switch user
                      :on-click #(reset! selected-user @u)

                      ; Let's Update the View!
                      ;;}}
                      ))
             (slide :title "Keeping state updated"
                    (highlight
                     ;;{{
                     (defn init! []
                       (rpc/get-state)
                       (js/setInterval rpc/get-state 1000))

                     (init!)
                     ;;}}
                     ))))
             (chapter
              (slide :title "References/links"
                     (div (p :class "strong" "Hoplon")  "http://www.hoplon.io")
                     (div (p :class "strong" "Hoplon mailing list") "http://hoplon.discoursehosting.net")
                     (div (p :class "strong" "DataScript") "http://www.github.com/tonsky/datascript")))))

