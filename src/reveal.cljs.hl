(ns hoplon.reveal
    (:require [clojure.string :as string]))

;; -------------
;; Helpers
;; -------------

(defn is-text?
  [children]
  (and (= (count children) 1)
       (not (= (.-nodeType (first children)) 1))))

(defn url
  [href]
  (a {:href href} href))

;; -------------
;; Custom Elements
;; -------------

(defelem markdown-slide
  [attrs children]
  (section (merge attrs {:data-markdown ""})
           (script :type "text/template" children)))

(defelem intro-title
  [attrs children]
  (if (is-text? children)
    (add-attributes! (h1 (first children)) {:class "slide-title intro"})
    children))

(defelem chapter-title
  [attrs children]
  (if (is-text? children)
    (add-attributes! (h2 (first children)) {:class "slide-title chapter"})
    children))

(defelem slide-title
  [attrs children]
  (if (is-text? children)
    (add-attributes! (h3 (first children)) {:class "slide-title slide"})
    children))

(defelem slide
  [{:keys [markdown title background transition] :as attrs} children]
  (let [attrs (dissoc attrs :markdown :title :background :transition)
        attrs (if background
                (assoc attrs :data-background background)
                attrs)
        attrs (if transition
                (assoc attrs :data-transition transition)
                attrs)
        children (if title
                   (concat [(slide-title title)] children)
                   children)]
    (if markdown
      (markdown-slide attrs children)
      (section attrs children))))

(defelem chapter
  [{:keys [title] :as attrs} children]
  (if (empty? title)
    (slide {} children)
    (slide {} (concat [(slide (chapter-title title))] children))))

(defelem intro
  [{:keys [title] :as attrs} children]
  (if (empty? title)
    (slide {} children)
    (slide {} (concat [(intro-title title)] children))))

(defelem slideshow
  [{:keys [theme] :as attrs :or {theme "default"}} children]
  (add-initfn!
   (fn []
     (.initialize
      js/Reveal
      (clj->js {:history true
                :dependencies
                [{:src "reveal.js/plugin/markdown/marked.js"}
                 {:src "reveal.js/plugin/markdown/markdown.js"}
                 {:src "reveal.js/plugin/highlight/highlight.js"
                  :async true
                  :callback (fn [] (.initHighlightingOnLoad js/hljs))}
                 {:src "reveal.js/plugin/notes/notes.js"
                  :async true}]}))))

  (div (-> attrs (dissoc :theme) (merge {:class "reveal"}))
       (link :rel "stylesheet"
             :href "reveal.js/css/reveal.css")
       (link :rel "stylesheet"
             :href (str "reveal.js/css/theme/" theme ".css")
             :id "theme")
       (link :rel "stylesheet"
             :href "reveal.js/plugin/highlight/github.min.css")
       (div :class "slides" children)))

(def bullet div)

(defelem n-column-table [{:keys [n title] :as attrs} children]
  (let [rows (partition-all n children)
        attrs (dissoc (assoc attrs :class "reveal talk") :title :n)]
    (table attrs
           (caption title)
           (loop-tpl :bindings [row rows]
                     (tr (loop-tpl :bindings [cell @row]
                                   (td @cell)))))))

(defelem two-column-table [attrs children]
  (apply (partial n-column-table (assoc attrs :n 2)) children))

(defn quicklist
  [& things]
  (ul
   (loop-tpl :bindings [x things]
             (li @x))))

(defelem notes
  [attrs children]
  (aside (merge attrs {:class "notes"}) children))

(defelem highlight
  [attrs children]
  (let [line-count (count (clojure.string/split children #"\\n"))]
    (pre (code (if (< line-count 3) (merge {:class "big-code"} attrs) attrs) children))))
