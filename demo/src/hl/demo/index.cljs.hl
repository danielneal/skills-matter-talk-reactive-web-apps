(page "index.html"
      (:require [datascript :as d]
                [demo.rpc :as rpc]))

(let [schema {:vote/user {:db/valueType :db.type/ref}
              :vote/option {:db/valueType :db.type/ref}}
      entities (cell= (:entities rpc/state))]
  (def db (cell= (d/with (d/empty-db schema) entities))))


(defc selected-user nil)

(defc= users
  (map (comp (partial d/entity db) first)
       (d/q '[:find ?u
              :in $
              :where [?u :user/name _]] db)))

(defc= default-user (first users))

(defc= user (or selected-user default-user))

(defc= options
  (d/q '[:find ?e ?t ?d
         :in $ ?p
         :where
         [?e :option/title ?t]
         [?e :option/description ?d]] db))

(let [count-all (fn [db option]
                  (ffirst (d/q '[:find (count ?v)
                                 :in $ ?o
                                 :where
                                 [?v :vote/option ?o]] db option)))

      count-user (fn [db option user]
                   (ffirst (d/q '[:find (count ?v)
                                  :in $ ?o ?u
                                  :where
                                  [?v :vote/option ?o]
                                  [?v :vote/user ?u]] db option user)))]
  (defc= options-with-votes
    (for [[id title description] options]
      [id title description (or (count-all db id) 0) (or (count-user db id (:db/id user)) 0)])))

(defc= votes (ffirst (d/q '[:find (count ?v)
                            :in $ ?u
                            :where [?v :vote/user ?u]]
                          db (:db/id user))))

(defc= remaining-votes (- (:user/max-votes user) votes))

(defelem count-button
  "A small icon button with a count and a click action"
  [{:keys [colour icon on-click count-cell] :as attrs} children]
  (div :class (str "ui icon button " colour)
       :on-click on-click
       (i :class (str "icon " icon))
       (span :do-toggle (cell= (> count-cell 0))
             (text "~{count-cell}"))))

(defelem candidate
  "A UI element representing a candidate, with votes and buttons"
  [{:keys [title description votes up-button down-button] :as attrs} children]
  (div :class "candidate ui inverted black segment"
       (div :class "votes ui raised teal segment"
            (span (text "~{votes}")))
       (div :class "details"
            (div :class "ui bottom right attached black inverted label"
                 (div :class "ui mini buttons"
                      (count-button up-button)
                      (count-button down-button)))
            (div :class "ui header" (text "~{title}"))
            (div :class "ui clearing divider")
            (p (text "~{description}")))))

(rpc/init)


(html
 (head
  (link :rel "stylesheet" :type "text/css" :href "css/main.css"))
 (body
  (div :class "ui inverted fixed black main menu"
       (div :class "ui item" "DINNER TIME")
       (div :class "right menu"
            (div :class "item"
                 (text "~{remaining-votes} votes left"))
            (div :class "ui simple dropdown item"
                 (text "~(:user/name user)")
                 (i :class "icon dropdown")
                 (div :class "menu"
                      (loop-tpl :bindings [u users]
                                (div :class "item"
                                     :on-click #(reset! selected-user @u)
                                     (text "~(:user/name u)")))))))
  (div :class "container"
       (loop-tpl :bindings [[id title description votes my-votes] options-with-votes]
                 (candidate :title title
                            :description description
                            :votes votes
                            :up-button {:colour "green"
                                        :icon "plus"
                                        :count-cell my-votes
                                        :on-click #(when (> @remaining-votes 0)
                                                     (rpc/up-vote! @id (:db/id @user)))}
                            :down-button {:colour "red"
                                          :icon "minus"
                                          :count-cell nil
                                          :on-click #(rpc/down-vote! @id (:db/id @user))})))))

